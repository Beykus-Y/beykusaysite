// static/scripts/chat.js

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º marked –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –∏–∑ CDN
// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–±–æ—Ä—â–∏–∫, –∑–∞–º–µ–Ω–∏ –Ω–∞: import { marked } from 'marked';
import { marked } from './markdown.js';

// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ hljs –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–∑ CDN
// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–±–æ—Ä—â–∏–∫, –∑–∞–º–µ–Ω–∏ –Ω–∞: import hljs from 'highlight.js/lib/core';
// –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π –Ω—É–∂–Ω—ã–µ —è–∑—ã–∫–∏: import javascript from 'highlight.js/lib/languages/javascript'; hljs.registerLanguage('javascript', javascript);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ marked
marked.setOptions({
    // –û–ø—Ü–∏—è highlight –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞ –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–µ–ª–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    breaks: true, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    gfm: true     // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è GitHub Flavored Markdown
});

const BASE_URL = `${window.location.protocol}//${window.location.host}`;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function escapeHtml(text) {
    if (typeof text !== 'string') return ''; // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∏–ø–∞
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ DOM.
 * @param {object} message - –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {string} [message.id] - ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {string} message.content - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
 * @param {string|null} [message.thoughts] - –¢–µ–∫—Å—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –ò–ò (–µ—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç).
 * @param {boolean} message.is_bot - True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞.
 * @param {string} message.created_at - ISO —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è.
 */
function addMessage(message) {
    const messagesContainer = document.querySelector('.messages-container');
    if (!messagesContainer) return;



    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏ —Ñ–ª–∞–≥ isNewMessage –°–ù–ê–ß–ê–õ–ê
    let messageElement = message.id ? document.getElementById(message.id) : null;
    const isNewMessage = !messageElement; // <--- –û–ë–™–Ø–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨

    if (!messageElement) { // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        messageElement = document.createElement('div');
        if (message.id) {
            messageElement.id = message.id;
        }
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–ª–∞—Å—Å —Å—Ä–∞–∑—É
        messageElement.className = `message ${message.is_bot ? 'ai' : 'user'}`;
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    const time = new Date(message.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è content, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    const visibleContent = message.content || (message.is_bot && isNewMessage ? '...' : '');
    const thoughtsContent = message.thoughts || '';

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º HTML
    if (isNewMessage) { // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Å—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        const userAvatar = !message.is_bot ? '<div class="message-avatar">üë§</div>' : '';
        const botAvatar = message.is_bot ? '<div class="message-avatar">ü§ñ</div>' : '';

        messageElement.innerHTML = `
            ${botAvatar}
            <div class="message-content">
                <div class="message-text"></div>
                <div class="message-time">${time}</div>
            </div>
            ${userAvatar}
        `;

        const messageTextElement = messageElement.querySelector('.message-text');
        if (messageTextElement) {
             if (message.is_bot) {
                 // –°—Ä–∞–∑—É –ø–∞—Ä—Å–∏–º Markdown –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                 messageTextElement.innerHTML = marked.parse(visibleContent || '');
             } else {
                 // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <p>
                 messageTextElement.innerHTML = `<p>${escapeHtml(visibleContent)}</p>`;
             }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if (thoughtsContent) {
            updateThoughtsInDOM(messageElement, thoughtsContent, 0);
        }

    } else { // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ)
        const messageTextElement = messageElement.querySelector('.message-text');
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç
        // –í–∞—Ä–∏–∞–Ω—Ç –ë: –ü–∞—Ä—Å–∏–º Markdown –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å—Ç—Ä–∏–º–∞
        if (messageTextElement && message.is_bot && message.content !== undefined) {
            messageTextElement.innerHTML = marked.parse(message.content || '');
        }
        // –í–∞—Ä–∏–∞–Ω—Ç –ê (–±—ã—Å—Ç—Ä–µ–µ, –Ω–æ –≤–∏–¥–µ–Ω Markdown):
        // if (messageTextElement && message.is_bot && message.content !== undefined) {
        //    messageTextElement.textContent = message.content || '';
        // }


        // –û–±–Ω–æ–≤–ª—è–µ–º/–¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏ –≤ —ç—Ç–æ–º —á–∞–Ω–∫–µ
        if (thoughtsContent) {
            const timerData = window.thinkingTimers ? window.thinkingTimers[message.id] : null;
            const seconds = timerData ? timerData.seconds : 0;
            updateThoughtsInDOM(messageElement, thoughtsContent, seconds);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
         const timeElement = messageElement.querySelector('.message-time');
         if (timeElement) timeElement.textContent = time;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ DOM, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤—ã–π
    if (isNewMessage) {
        messagesContainer.appendChild(messageElement);
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
    const scrollBehavior = !message.is_bot && isNewMessage ? 'instant' : 'smooth';
    if (messageElement && typeof messageElement.scrollIntoView === 'function') {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è 'smooth', —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä —É—Å–ø–µ–ª –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å
        requestAnimationFrame(() => {
            messageElement.scrollIntoView({ behavior: scrollBehavior, block: 'end' });
        });
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø–æ–∑–∂–µ (–≤ loadMessages –∏–ª–∏ –∫–æ–Ω—Ü–µ submit)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
function handleToggleThoughts(event) {
    const header = event.currentTarget;
    const content = header.nextElementSibling;
    if (!content) return;

    const isHidden = content.style.display === 'none';
    content.style.display = isHidden ? 'block' : 'none';
    header.setAttribute('data-toggled', isHidden.toString());

    const timeSpan = header.querySelector('.thinking-time');
    const time = timeSpan ? timeSpan.textContent : '';
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
    header.innerHTML = isHidden
        ? `ü§î –°–∫—Ä—ã—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <span class="thinking-time">${time}</span>`
        : `ü§î –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <span class="thinking-time">${time}</span>`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –±–ª–æ–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
function updateThoughtsInDOM(messageElement, thoughtsText, seconds) {
    if (!messageElement) return;
    let thoughtsContainer = messageElement.querySelector('.thoughts-container');
    const messageTextElement = messageElement.querySelector('.message-text');
    const messageContentDiv = messageElement.querySelector('.message-content');

    if (!messageContentDiv) return;

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!thoughtsContainer) {
        thoughtsContainer = document.createElement('div');
        thoughtsContainer.className = 'thoughts-container';
        if (messageTextElement) {
            messageContentDiv.insertBefore(thoughtsContainer, messageTextElement);
        } else {
            messageContentDiv.appendChild(thoughtsContainer); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –µ—â–µ –Ω–µ—Ç
        }
        // –°–æ–∑–¥–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        thoughtsContainer.innerHTML = `
            <div class="thoughts-header" data-toggled="false">
                <!-- –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∏–∂–µ -->
            </div>
            <div class="thoughts-content" style="display: none;"></div>
        `;
        // –í–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        thoughtsContainer.querySelector('.thoughts-header').addEventListener('click', handleToggleThoughts);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    const thoughtsContentElement = thoughtsContainer.querySelector('.thoughts-content');
    if (thoughtsContentElement) {
        // –°–Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ø–æ—Ç–æ–º –ø–∞—Ä—Å–∏–Ω–≥ Markdown
        thoughtsContentElement.textContent = thoughtsText || ''; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ null/undefined
        if (thoughtsText) { // –ü–∞—Ä—Å–∏–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –ø–∞—Ä—Å–∏—Ç—å
             thoughtsContentElement.innerHTML = marked.parse(thoughtsText);
        }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –≤—Ä–µ–º—è
    const thoughtsHeader = thoughtsContainer.querySelector('.thoughts-header');
    if (thoughtsHeader) {
        const isHidden = thoughtsContentElement?.style.display === 'none';
        const toggledState = thoughtsHeader.getAttribute('data-toggled') === 'true';

        thoughtsHeader.innerHTML = (isHidden && !toggledState) || (!isHidden && toggledState)
            ? `ü§î –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <span class="thinking-time">${seconds}s</span>`
            : `ü§î –°–∫—Ä—ã—Ç—å —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è <span class="thinking-time">${seconds}s</span>`;
    }

    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–¥–∞ –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å)
    applySyntaxHighlighting(thoughtsContainer);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
function applySyntaxHighlighting(parentElement) {
    if (!parentElement || typeof hljs === 'undefined') return;

    parentElement.querySelectorAll('pre code:not(.hljs-highlighted)').forEach((block) => {
        // console.debug("–ü–æ–¥—Å–≤–µ—Ç–∫–∞ –±–ª–æ–∫–∞:", block); // –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º highlightElement, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–ª–∞—Å—Å hljs
            hljs.highlightElement(block);
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –Ω–µ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
            block.classList.add('hljs-highlighted');
        } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –±–ª–æ–∫–∞:", e, block);
        }
    });

    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–æ–∫ –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    parentElement.querySelectorAll('a').forEach(link => {
        if (!link.target) {
            link.target = '_blank';
            link.rel = 'noopener noreferrer';
        }
    });
}

// --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π ---
function initTheme() {
    const themeToggle = document.querySelector('.theme-toggle');
    if (!themeToggle) return;
    const savedTheme = localStorage.getItem('theme') || 'light';
    document.documentElement.setAttribute('data-theme', savedTheme);

    themeToggle.addEventListener('click', () => {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'light' ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
    });
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
document.addEventListener('DOMContentLoaded', async () => {
    initTheme();
    const token = localStorage.getItem('token');
    const user = JSON.parse(localStorage.getItem('user'));

    if (!token || !user) {
        window.location.href = '/auth.html';
        return;
    }

    const userProfileName = document.querySelector('.user-profile span');
    if (userProfileName) {
        userProfileName.textContent = user.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    }

    let currentChatId = null;
    let currentModel = null;
    // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
    window.thinkingTimers = {};

    // --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö ---
    async function loadChats() {
        const chatsList = document.querySelector('.chats-list');
        if (!chatsList) return;
        chatsList.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤...</p>';

        try {
            const response = await fetch(`${BASE_URL}/api/chats`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) {
                 if (response.status === 401) {
                      localStorage.removeItem('token');
                      localStorage.removeItem('user');
                      window.location.href = '/auth.html';
                      return;
                 }
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
            }
            const chats = await response.json();
            chatsList.innerHTML = '';

            if (chats.length === 0) {
                chatsList.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —á–∞—Ç–æ–≤.</p>';
            } else {
                chats.forEach(chat => {
                    const chatElement = document.createElement('div');
                    chatElement.className = 'chat-item';
                    chatElement.dataset.chatId = chat.id;
                    if (chat.id === currentChatId) {
                        chatElement.classList.add('active');
                    }

                    chatElement.innerHTML = `
                        <div class="chat-title">${escapeHtml(chat.title)}</div>
                        <div class="chat-preview">${escapeHtml(chat.last_message)}</div>
                    `;

                    chatElement.addEventListener('click', () => {
                        document.querySelectorAll('.chat-item.active').forEach(item => item.classList.remove('active'));
                        chatElement.classList.add('active');
                        loadMessages(chat.id);
                    });
                    chatsList.appendChild(chatElement);
                });

                if (!currentChatId && chats.length > 0) {
                     const firstChatElement = chatsList.querySelector('.chat-item');
                     if (firstChatElement) { // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
                         firstChatElement.classList.add('active');
                         loadMessages(chats[0].id);
                     }
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤:', error);
            chatsList.innerHTML = `<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞—Ç—ã.</p>`;
        }
    }

    async function loadMessages(chatId) {
        if (!chatId) return;
        currentChatId = chatId;
        Object.values(window.thinkingTimers || {}).forEach(timer => clearInterval(timer.intervalId));
        window.thinkingTimers = {};

        const messagesContainer = document.querySelector('.messages-container');
        if (!messagesContainer) return;
        messagesContainer.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>';

        try {
            const response = await fetch(`${BASE_URL}/api/chats/${chatId}/messages`, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) {
                 if (response.status === 401) { window.location.href = '/auth.html'; return; }
                 if (response.status === 404) { throw new Error('–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.'); }
                throw new Error(`–û—à–∏–±–∫–∞ ${response.status}: ${response.statusText}`);
            }
            const messages = await response.json();
            messagesContainer.innerHTML = '';

            if (messages.length === 0) {
                messagesContainer.innerHTML = '<p>–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.</p>';
            } else {
                messages.forEach(message => {
                    // –í—ã–∑—ã–≤–∞–µ–º addMessage, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —Å–∞–º –ø–∞—Ä—Å–∏—Ç Markdown –¥–ª—è –±–æ—Ç–æ–≤
                    addMessage(message);
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if (message.is_bot && message.id && message.thoughts) {
                        const messageElement = document.getElementById(message.id);
                        if (messageElement?.querySelector('.thoughts-container')) {
                           startThinkingTimer(message.id);
                        }
                    }
                });
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ –≤—Å–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –ü–û–°–õ–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö
                applySyntaxHighlighting(messagesContainer);
            }
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –∫–æ–Ω–µ—Ü
            requestAnimationFrame(() => {
               messagesContainer.scrollTop = messagesContainer.scrollHeight;
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            messagesContainer.innerHTML = `<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: ${escapeHtml(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}</p>`;
        }
    }

    async function loadModels() {
        const modelSelect = document.getElementById('modelSelect');
        if (!modelSelect) return;
        try {
            const response = await fetch(`${BASE_URL}/api/models`, {
                 headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            const data = await response.json();

            if (data.models && data.models.length > 0) {
                modelSelect.innerHTML = data.models.map(model =>
                    `<option value="${model.id}">${escapeHtml(model.name)}</option>`
                ).join('');
                currentModel = data.models[0].id;
                modelSelect.value = currentModel;
            } else {
                 modelSelect.innerHTML = '<option value="">–ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</option>';
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π:', error);
            modelSelect.innerHTML = '<option value="">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</option>';
        }
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    const newChatBtn = document.querySelector('.new-chat-btn');
    if (newChatBtn) {
        newChatBtn.addEventListener('click', async () => {
            try {
                const response = await fetch(`${BASE_URL}/api/chats`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
                    body: JSON.stringify({ title: '–ù–æ–≤—ã–π —á–∞—Ç' })
                });
                if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
                const newChat = await response.json();
                await loadChats();
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                const newChatElement = document.querySelector(`.chat-item[data-chat-id="${newChat.id}"]`);
                document.querySelectorAll('.chat-item.active').forEach(item => item.classList.remove('active'));
                if (newChatElement) newChatElement.classList.add('active');
                loadMessages(newChat.id);
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç: ${error.message}`);
            }
        });
    }

    const messageForm = document.getElementById('messageForm');
    const messageInput = messageForm?.querySelector('textarea');

    if (messageForm && messageInput) {
        messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                messageForm.requestSubmit();
            }
        });

        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!currentChatId) {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —á–∞—Ç.');
                return;
            }
            const content = messageInput.value.trim();
            if (!content) return;

            // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            addMessage({
                content: content,
                is_bot: false,
                created_at: new Date().toISOString()
            });
            messageInput.value = '';
            messageInput.style.height = 'auto';

            // 2. –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            const botMessageId = 'bot-message-' + crypto.randomUUID();
            // –°–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å –ø–æ–º–æ—â—å—é addMessage
            addMessage({
                id: botMessageId,
                content: '', // –û—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è –∫–∞–∫ '...'
                is_bot: true,
                created_at: new Date().toISOString()
            });
            startThinkingTimer(botMessageId);

            // 3. –ó–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
            try {
                const response = await fetch(`${BASE_URL}/api/chats/${currentChatId}/messages`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
                    body: JSON.stringify({ content })
                });

                if (!response.ok) {
                     const errorData = await response.json().catch(() => ({ error: `–û—à–∏–±–∫–∞: ${response.statusText}` }));
                     throw new Error(errorData.error || `–û—à–∏–±–∫–∞ ${response.status}`);
                }
                if (!response.body) {
                     throw new Error('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–ª–æ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞.');
                }

                // 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ SSE
                const reader = response.body.getReader();
                const decoder = new TextDecoder();
                let buffer = '';
                let currentFullVisibleResponse = ''; // –í–∏–¥–∏–º—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                let currentAccumulatedThoughts = ''; // –†–∞–∑–º—ã—à–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                while (true) {
                    const { value, done } = await reader.read();
                    if (done) break;
                    buffer += decoder.decode(value, { stream: true });

                    let boundaryIndex;
                    while ((boundaryIndex = buffer.indexOf('\n\n')) >= 0) {
                        const message = buffer.substring(0, boundaryIndex);
                        buffer = buffer.substring(boundaryIndex + 2);

                        if (message.startsWith('data:')) {
                            try {
                                const data = JSON.parse(message.substring(5).trim());
                                const currentBotElement = document.getElementById(botMessageId);
                                if (!currentBotElement) break; // –≠–ª–µ–º–µ–Ω—Ç –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª–µ–Ω

                                if (data.error) {
                                    console.error('–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø–æ—Ç–æ–∫–µ:', data.error);
                                    currentBotElement.querySelector('.message-text').innerHTML = `<p class="error">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${escapeHtml(data.error)}</p>`;
                                    stopThinkingTimer(botMessageId);
                                    return;
                                }

                                let contentChanged = false;
                                let thoughtsChanged = false;

                                if (data.content) {
                                    currentFullVisibleResponse += data.content;
                                    contentChanged = true;
                                }
                                if (data.thoughts) { // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ —à–ª–µ—Ç —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
                                    currentAccumulatedThoughts += data.thoughts;
                                    thoughtsChanged = true;
                                }

                                // –û–±–Ω–æ–≤–ª—è–µ–º DOM —á–µ—Ä–µ–∑ addMessage (–∫–æ—Ç–æ—Ä—ã–π —Ç–µ–ø–µ—Ä—å —É–º–µ–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å)
                                if (contentChanged || thoughtsChanged) {
                                     addMessage({ // –í—ã–∑—ã–≤–∞–µ–º addMessage –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                                         id: botMessageId,
                                         content: currentFullVisibleResponse, // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                                         thoughts: currentAccumulatedThoughts,
                                         is_bot: true,
                                         created_at: new Date().toISOString() // –í—Ä–µ–º—è –º–æ–∂–Ω–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å, –Ω–æ –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
                                     });
                                }

                            } catch (e) {
                                console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ SSE:', e, '–°–æ–æ–±—â–µ–Ω–∏–µ:', message);
                            }
                        }
                    } // end while(boundaryIndex)
                } // end while(true) - reader loop

                 // 5. –ü–æ—Å—Ç-–æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                stopThinkingTimer(botMessageId);
                const finalBotMessageElement = document.getElementById(botMessageId);
                if (finalBotMessageElement) {
                    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º Markdown (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ç—Ä–∏–º –±—ã–ª —Å textContent)
                    const messageTextElement = finalBotMessageElement.querySelector('.message-text');
                    if (messageTextElement) {
                         messageTextElement.innerHTML = marked.parse(currentFullVisibleResponse || '');
                    }
                    // –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π
                    const timerData = window.thinkingTimers ? window.thinkingTimers[botMessageId] : null;
                    updateThoughtsInDOM(finalBotMessageElement, currentAccumulatedThoughts, timerData ? timerData.seconds : 0);
                    // –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –µ—Å–ª–∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª–æ
                    if (!currentAccumulatedThoughts && finalBotMessageElement.querySelector('.thoughts-container')) {
                         finalBotMessageElement.querySelector('.thoughts-container').remove();
                    }
                    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–æ–¥–∞ –≤—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    applySyntaxHighlighting(finalBotMessageElement);
                    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞
                    requestAnimationFrame(() => {
                       finalBotMessageElement.scrollIntoView({ behavior: 'smooth', block: 'end' });
                    });
                }

                 await loadChats(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤

            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                const botMsgElem = document.getElementById(botMessageId);
                if (botMsgElem) {
                    botMsgElem.querySelector('.message-text').innerHTML = `<p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç: ${escapeHtml(error.message)}</p>`;
                    stopThinkingTimer(botMessageId);
                    const thoughtsContainer = botMsgElem.querySelector('.thoughts-container');
                     if (thoughtsContainer) thoughtsContainer.remove();
                }
            }
        });

         messageInput.addEventListener('input', function() {
            this.style.height = 'auto';
            const maxHeight = 200;
            this.style.height = Math.min(this.scrollHeight, maxHeight) + 'px';
        });
    } else {
        console.error("–§–æ—Ä–º–∞ –∏–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!");
    }

    // --- –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (—Å–º–µ–Ω–∞ –º–æ–¥–µ–ª–∏, —Å–±—Ä–æ—Å —á–∞—Ç–∞, –º–æ–±–∏–ª—å–Ω–æ–µ –º–µ–Ω—é) ---
    const modelSelect = document.getElementById('modelSelect');
    if (modelSelect) {
        modelSelect.addEventListener('change', async (e) => {
            const newModel = e.target.value;
            if (!currentChatId || !newModel || newModel === currentModel) return;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ ${newModel} –¥–ª—è —á–∞—Ç–∞ ${currentChatId}`);
            try {
                const response = await fetch(`${BASE_URL}/api/chats/${currentChatId}/model`, {
                    method: 'POST',
                    headers: { 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' },
                    body: JSON.stringify({ model: newModel })
                });
                if (!response.ok) {
                     const errorData = await response.json().catch(()=>({error: `–û—à–∏–±–∫–∞ ${response.status}`}));
                     throw new Error(errorData.error || `–û—à–∏–±–∫–∞ ${response.status}`);
                }
                currentModel = newModel;
                console.log(`–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${newModel}`);
                addMessage({
                    id: `system-message-${Date.now()}`,
                    content: `–ú–æ–¥–µ–ª—å —á–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ ${modelSelect.options[modelSelect.selectedIndex].text}.`,
                    is_bot: true,
                    created_at: new Date().toISOString()
                });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏:', error);
                alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å: ${error.message}`);
                modelSelect.value = currentModel;
            }
        });
    }

    const resetBtn = document.querySelector('.reset-chat-btn');
    if(resetBtn) {
        resetBtn.addEventListener('click', () => {
            if (currentChatId && confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è –ò–ò? –°–æ–æ–±—â–µ–Ω–∏—è –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤–∏–¥–∏–º—ã–º–∏.')) {
                 resetChat(currentChatId);
            }
        });
    }

    async function resetChat(chatId) {
        console.log(`–°–±—Ä–æ—Å —á–∞—Ç–∞ ${chatId}`);
        try {
            const response = await fetch(`${BASE_URL}/api/chats/${chatId}/reset`, {
                method: 'POST',
                headers: { 'Authorization': `Bearer ${token}` }
            });
            if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ ${response.status}`);
            console.log(`–ß–∞—Ç ${chatId} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.`);
            addMessage({
                id: `system-message-${Date.now()}`,
                content: '–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç–∞ –¥–ª—è –ò–ò –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.',
                is_bot: true,
                created_at: new Date().toISOString()
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —á–∞—Ç–∞:', error);
            alert(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç: ${error.message}`);
        }
    }

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (window.innerWidth <= 768) {
        const sidebar = document.querySelector('.chat-sidebar');
        const chatHeader = document.querySelector('.chat-main .chat-header');
        if (sidebar && chatHeader && !chatHeader.querySelector('.toggle-sidebar')) {
            const toggleButton = document.createElement('button');
            toggleButton.classList.add('toggle-sidebar');
            toggleButton.innerHTML = '‚ò∞';
             toggleButton.style.cssText = `
                background: none; border: none; font-size: 1.5rem; cursor: pointer;
                color: var(--text-primary); margin-right: 10px; padding: 5px; order: -1;
            `;
            chatHeader.prepend(toggleButton);

            toggleButton.addEventListener('click', (e) => {
                 e.stopPropagation();
                sidebar.classList.toggle('active');
            });

            document.addEventListener('click', (e) => {
                 if (sidebar.classList.contains('active') && !sidebar.contains(e.target) && !toggleButton.contains(e.target)) {
                      sidebar.classList.remove('active');
                 }
            });
        }
    }


    // --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π ---
    function startThinkingTimer(messageId) {
        if (!messageId) return; // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if (window.thinkingTimers[messageId]) {
            clearInterval(window.thinkingTimers[messageId].intervalId);
        }
        window.thinkingTimers[messageId] = { intervalId: null, seconds: 0 };

        window.thinkingTimers[messageId].intervalId = setInterval(() => {
            if (window.thinkingTimers[messageId]) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
                window.thinkingTimers[messageId].seconds++;
                const messageElement = document.getElementById(messageId);
                const timeSpan = messageElement?.querySelector('.thoughts-container .thinking-time');
                if (timeSpan) {
                    timeSpan.textContent = `${window.thinkingTimers[messageId].seconds}s`;
                }
            } else {
                // –¢–∞–π–º–µ—Ä –±—ã–ª —É–¥–∞–ª–µ–Ω, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                 const timerId = window.thinkingTimers[messageId]?.intervalId;
                 if (timerId) clearInterval(timerId);
            }
        }, 1000);
    }

    function stopThinkingTimer(messageId) {
         if (!messageId) return;
        if (window.thinkingTimers[messageId]) {
            clearInterval(window.thinkingTimers[messageId].intervalId);
            // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // delete window.thinkingTimers[messageId];
        }
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
    await loadModels();
    await loadChats();

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded