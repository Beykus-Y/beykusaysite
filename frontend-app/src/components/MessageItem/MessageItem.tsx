// src/components/MessageItem/MessageItem.tsx
import React, { useState, useEffect, useRef, memo } from 'react';
import { marked } from 'marked';
import hljs from 'highlight.js';
import styles from '../../pages/ChatPage/ChatPage.module.css'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∏–ª–∏ –∏–∑ ChatPage

// --- –¢–∏–ø–∏–∑–∞—Ü–∏—è ---
// –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Message –∏–∑ ChatPage.tsx
interface Message {
    id: string;
    tempId?: string;
    content: string; // –¢–µ–ø–µ—Ä—å —ç—Ç–æ –¶–ï–õ–ï–í–û–ô –∫–æ–Ω—Ç–µ–Ω—Ç
    is_bot: boolean;
    created_at: string;
    thoughts?: string | null;
    isStreaming?: boolean;
    thinkingSeconds?: number;
    // –î–æ–±–∞–≤–∏–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π callback –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    onHighlightComplete?: (element: HTMLDivElement) => void;
}

interface MessageItemProps {
    message: Message;
    isThoughtsVisible: boolean;
    onToggleThoughts: (id: string) => void;
}

const TYPING_SPEED_MS = 25; // –°–∫–æ—Ä–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ (–º—Å –Ω–∞ —Å–∏–º–≤–æ–ª), –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ –∂–µ–ª–∞–Ω–∏—é

// –ò—Å–ø–æ–ª—å–∑—É–µ–º memo –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props
const MessageItem: React.FC<MessageItemProps> = memo(({ message, isThoughtsVisible, onToggleThoughts }) => {
    const [displayedContent, setDisplayedContent] = useState('');
    const [displayedThoughts, setDisplayedThoughts] = useState(''); // –î–ª—è –º—ã—Å–ª–µ–π —Ç–æ–∂–µ –º–æ–∂–Ω–æ
    const contentRef = useRef<HTMLDivElement>(null); // Ref –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const thoughtsContentRef = useRef<HTMLDivElement>(null); // Ref –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –º—ã—Å–ª–µ–π
    const isTypewriterDone = useRef(false); // –§–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    // --- –≠—Ñ—Ñ–µ–∫—Ç –ø–∏—à—É—â–µ–π –º–∞—à–∏–Ω–∫–∏ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ---
    useEffect(() => {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ—Å—Ç–∞–ª–æ —Å—Ç—Ä–∏–º–∏—Ç—å—Å—è –∏ –µ—â–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        if (!message.isStreaming && message.content !== displayedContent) {
            setDisplayedContent(message.content);
            isTypewriterDone.current = true; // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞–ª–∏ –≤—Å—ë
            return; // –í—ã—Ö–æ–¥–∏–º, –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ –Ω—É–∂–µ–Ω
        }
        // –ï—Å–ª–∏ –Ω–µ —Å—Ç—Ä–∏–º–∏—Ç—Å—è –∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if (!message.isStreaming && isTypewriterDone.current) {
            return;
        }
        // –ï—Å–ª–∏ –Ω–µ –±–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–∞–∑—É
        if (!message.is_bot) {
            setDisplayedContent(message.content);
            isTypewriterDone.current = true;
            return;
        }

        // --- –õ–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ---
        isTypewriterDone.current = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        let charIndex = displayedContent.length; // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π –¥–ª–∏–Ω—ã

        const intervalId = setInterval(() => {
            // –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –º—ã –µ—â–µ –Ω–µ –≤—Å–µ –Ω–∞–ø–µ—á–∞—Ç–∞–ª–∏
            if (charIndex < message.content.length) {
                setDisplayedContent((prev) => message.content.substring(0, charIndex + 1));
                charIndex++;
            } else {
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞ –ò —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
                if (!message.isStreaming) {
                    clearInterval(intervalId);
                    isTypewriterDone.current = true; // –ü–æ–º–µ—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    console.log(`Typewriter done for message ${message.id}`);
                }
                // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –∫–æ–Ω—Ü–∞, –Ω–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –µ—â–µ –∏–¥–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (charIndex –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è)
            }
        }, TYPING_SPEED_MS);

        // –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        return () => clearInterval(intervalId);

    }, [message.content, message.is_bot, message.isStreaming, message.id]); // –ó–∞–≤–∏—Å–∏–º –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞

    // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è "–ø–µ—á–∞—Ç–∏" —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–∞–∑—É) ---
     useEffect(() => {
         // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º—ã—Å–ª–∏ —Å—Ä–∞–∑—É –∏–ª–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π typewriter
         if (message.thoughts && message.thoughts !== displayedThoughts) {
              setDisplayedThoughts(message.thoughts);
         } else if (!message.thoughts) {
             setDisplayedThoughts('');
         }
     }, [message.thoughts, displayedThoughts]);


    // --- –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–æ–¥–∞ –ü–û–°–õ–ï –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ ---
    useEffect(() => {
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if (contentRef.current && isTypewriterDone.current) {
            contentRef.current.querySelectorAll<HTMLElement>('pre code:not(.hljs-highlighted)')
                .forEach((block) => {
                    try { hljs.highlightElement(block); block.classList.add('hljs-highlighted'); }
                    catch (e) { console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏:", e, block); }
                });
             // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–æ–∫
             contentRef.current.querySelectorAll('a:not([target])')
                 .forEach(link => { link.setAttribute('target', '_blank'); link.setAttribute('rel', 'noopener noreferrer'); });
        }
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –≤–∏–¥–∏–º—ã –∏ –µ—Å—Ç—å)
        if (thoughtsContentRef.current && isThoughtsVisible && displayedThoughts) {
             thoughtsContentRef.current.querySelectorAll<HTMLElement>('pre code:not(.hljs-highlighted)')
                .forEach((block) => {
                    try { hljs.highlightElement(block); block.classList.add('hljs-highlighted'); }
                    catch (e) { console.error("–û—à–∏–±–∫–∞ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –º—ã—Å–ª–µ–π:", e, block); }
                });
             thoughtsContentRef.current.querySelectorAll('a:not([target])')
                 .forEach(link => { link.setAttribute('target', '_blank'); link.setAttribute('rel', 'noopener noreferrer'); });
        }
        // –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—á–∞—Ç–∏ –∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º—ã—Å–ª–µ–π
    }, [displayedContent, displayedThoughts, isTypewriterDone, isThoughtsVisible]);


    // --- –ü–∞—Ä—Å–∏–Ω–≥ Markdown ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º useMemo –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    const parsedContentHtml = React.useMemo(() => {
        if (!message.is_bot) {
            return `<p>${escapeHtml(displayedContent)}</p>`; // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –ø—Ä–æ—Å—Ç–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
        }
         // –î–ª—è –±–æ—Ç–∞ –ø–∞—Ä—Å–∏–º Markdown, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞–ø–µ—á–∞—Ç–∞–Ω
         // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–ø–æ–ª–Ω–æ–≥–æ Markdown –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏,
         // –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–¥–∞ –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.
         // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–∞—Ä—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ isTypewriterDone.current === true.
         return marked.parse(displayedContent || '');
    }, [displayedContent, message.is_bot]);

    const parsedThoughtsHtml = React.useMemo(() => {
        return message.thoughts ? marked.parse(displayedThoughts || '') : '';
    }, [displayedThoughts, message.thoughts]);


    return (
        <div className={`${styles.message} ${message.is_bot ? styles.ai : styles.user}`}>
            {message.is_bot && <div className={styles.messageAvatar}>ü§ñ</div>}
            <div className={styles.messageContent}>
                {/* –ë–ª–æ–∫ –†–∞–∑–º—ã—à–ª–µ–Ω–∏–π */}
                {message.thoughts && (
                    <div className={styles.thoughtsContainer}>
                        <div
                            className={styles.thoughtsHeader}
                            onClick={() => onToggleThoughts(message.id)}
                            role="button" tabIndex={0}
                            onKeyDown={(e) => { if (e.key === 'Enter' || e.key === ' ') onToggleThoughts(message.id); }}
                        >
                            ü§î {isThoughtsVisible ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è
                            <span className={styles.thinkingTime}>
                                {message.thinkingSeconds !== undefined && `${message.thinkingSeconds}s`}
                            </span>
                        </div>
                        {isThoughtsVisible && (
                             <div
                                ref={thoughtsContentRef} // –î–æ–±–∞–≤–ª—è–µ–º ref
                                className={styles.thoughtsContent}
                                key={`${message.id}-thoughts-content`} // –ö–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                                dangerouslySetInnerHTML={{ __html: parsedThoughtsHtml }}
                            />
                        )}
                    </div>
                )}

                {/* –û—Å–Ω–æ–≤–Ω–æ–π –ö–æ–Ω—Ç–µ–Ω—Ç –°–æ–æ–±—â–µ–Ω–∏—è */}
                {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º displayedContent */}
                {(displayedContent || (message.is_bot && message.isStreaming && displayedContent === '')) ? ( // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –ò–õ–ò –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–∏–º–∏–Ω–≥ –±–æ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞)
                    <div
                        ref={contentRef} // –î–æ–±–∞–≤–ª—è–µ–º ref
                        className={styles.messageText}
                        key={`${message.id}-content`} // –ö–ª—é—á –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
                        dangerouslySetInnerHTML={{ __html: parsedContentHtml }}
                    />
                ) : ( message.is_bot && message.isStreaming && // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –µ—â–µ –Ω–µ—Ç
                    <div className={styles.typingIndicator}> <span/><span/><span/> </div>
                )}

                <div className={styles.messageTime}>
                    {new Date(message.created_at).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                </div>
            </div>
            {!message.is_bot && <div className={styles.messageAvatar}>üë§</div>}
        </div>
    );
});

export default MessageItem;